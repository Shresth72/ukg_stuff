/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.30' // Use the latest version
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testCompileOnly 'org.projectlombok:lombok:1.18.30' // Use the latest version
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    filter {
      includeTestsMatching "org.reward.extensions.*"
    }
}

tasks.register('runMethods', JavaExec) {
  group = 'application'
  description = 'run Methods class main'
  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'org.example.Methods'
}

tasks.register('runStrings', JavaExec) {
  group = 'application'
  description = 'run Strings class main'
  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'org.example.Strings'
}
